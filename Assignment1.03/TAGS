
heap.c,1009
#undef min4,39
struct heap_node 6,51
  heap_node_t *next;next7,70
  heap_node_t *prev;prev8,91
  heap_node_t *parent;parent9,112
  heap_node_t *child;child10,135
  void *datum;datum11,157
  uint32_t degree;12,172
  uint32_t mark;13,191
#define splice_heap_node_lists(16,212
#define insert_heap_node_in_list(25,524
#define remove_heap_node_from_list(32,748
void print_heap_node(37,881
void print_heap(53,1203
void print_heap_node_list(70,1505
void heap_init(86,1704
void heap_node_delete(96,1940
void heap_delete(114,2244
heap_node_t *heap_insert(heap_insert125,2409
void *heap_peek_min(heap_peek_min145,2725
static void heap_link(150,2801
static void heap_consolidate(164,3123
void *heap_remove_min(heap_remove_min205,4056
int heap_combine(240,4590
static void heap_cut(269,5241
static void heap_cascading_cut(283,5522
int heap_decrease_key(297,5748
int heap_decrease_key_no_replace(311,5990
int32_t compare(335,6564
char *print_int(print_int340,6663
int main(349,6781

heap.h,245
# define HEAP_H2,15
typedef struct heap_node heap_node_t;11,114
typedef struct heap 13,153
  heap_node_t *min;min14,175
  uint32_t size;15,195
  int32_t (*compare)compare16,212
  void (*datum_delete)datum_delete17,269
} heap_t;18,301

macros.h,611
# define MACROS_H2,17
#  define dprintf(16,213
#  define dfprintf(17,256
#  define dprintf(19,320
#  define dfprintf(20,343
# define fieldwidth(23,382
# define exit(37,1201
# define fopen(42,1441
#  define malloc(76,3348
#  define calloc(92,4430
#  define strdup(107,5435
#  define free(117,6055
# define swap(125,6303
# define memswap(131,6415
# define structdup(137,6543
# define datacmp(144,6927
# define max2(153,7400
# define min2(160,7576
# define max 167,7752
# define min 168,7770
# define max3(170,7789
# define min3(171,7830
# define frand(173,7872
# define structdup(180,7984

rlg327.c,2868
#define DUMP_HARDNESS_IMAGES 16,258
# define rand_under(20,403
# define rand_range(24,546
# define UNUSED(25,619
typedef struct corridor_path 27,650
  heap_node_t *hn;hn28,681
  uint8_t pos[pos29,700
  uint8_t from[from30,718
  int32_t cost;31,737
} corridor_path_t;32,753
typedef struct pc_path 35,792
  heap_node_t *hn;hn36,817
  uint8_t pos[pos37,836
  int32_t cost;38,854
} pc_path_t;39,870
typedef enum dim 41,884
  dim_x,42,903
  dim_y,43,912
  num_dims44,921
} dim_t;45,932
typedef int16_t pair_t[pair_t47,942
#define DUNGEON_X 49,977
#define DUNGEON_Y 50,1011
#define MIN_ROOMS 51,1045
#define MAX_ROOMS 52,1078
#define ROOM_MIN_X 53,1111
#define ROOM_MIN_Y 54,1144
#define ROOM_MAX_X 55,1177
#define ROOM_MAX_Y 56,1211
#define SAVE_DIR 57,1244
#define DUNGEON_SAVE_FILE 58,1285
#define DUNGEON_SAVE_SEMANTIC 59,1326
#define DUNGEON_SAVE_VERSION 60,1372
#define mappair(62,1407
#define mapxy(63,1464
#define hardnesspair(64,1499
#define hardnessxy(65,1566
typedef enum __attribute__ ((__packed__)) terrain_type 67,1612
  ter_debug,68,1669
  ter_wall,69,1682
  ter_wall_immutable,70,1694
  ter_floor,71,1716
  ter_floor_room,72,1729
  ter_floor_hall,73,1747
  ter_pc,74,1765
} terrain_type_t;75,1798
typedef struct room 77,1817
  pair_t position;78,1839
  pair_t size;79,1858
} room_t;80,1873
typedef struct dungeon 82,1884
  uint32_t num_rooms;83,1909
  room_t *rooms;rooms84,1931
  terrain_type_t map[map85,1948
  uint8_t hardness[hardness94,2601
  pair_t pc;95,2643
} dungeon_t;96,2656
static uint32_t in_room(99,2671
static uint32_t adjacent_to_room(115,3062
static uint32_t is_open_space(123,3323
static int32_t corridor_path_cmp(128,3422
static void dijkstra_corridor(132,3572
static void dijkstra_corridor_inv(231,7309
#define hardnesspair_inv(284,8631
static int connect_two_rooms(334,11302
static int create_cycle(353,11954
static int connect_rooms(395,13519
int gaussian[gaussian408,13712
typedef struct queue_node 416,13868
  int x,417,13896
  int x, y;417,13896
  struct queue_node *next;next418,13908
} queue_node_t;419,13935
static int smooth_hardness(421,13952
static int empty_dungeon(580,18221
static int place_rooms(599,18597
static int make_rooms(636,19784
int gen_dungeon(659,20345
void render_dungeon(671,20488
void delete_dungeon(702,21165
void init_dungeon(707,21222
int write_dungeon_map(712,21279
int write_rooms(725,21508
uint32_t calculate_dungeon_size(745,21927
int makedirectory(752,22174
int write_dungeon(787,22810
int read_dungeon_map(850,24305
int read_rooms(873,24903
int calculate_num_rooms(927,26720
int read_dungeon(935,26960
int read_pgm(1014,28844
void usage(1099,31247
static int32_t pc_path_cmp(1111,31499
static void dijkstra_pc_tunnel(1116,31632
static void dijkstra_pc_nontunnel(1235,35761
int main(1366,40164
