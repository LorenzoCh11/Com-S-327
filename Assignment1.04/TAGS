
dims.h,147
# define DIMS_H2,15
typedef enum dim 7,190
  dim_x,8,209
  dim_y,9,218
  num_dims10,227
} dim_t;11,238
typedef int16_t pair_t[pair_t13,248

dungeon.c,1426
#define DUMP_HARDNESS_IMAGES 13,202
typedef struct corridor_path 15,234
  heap_node_t *hn;hn16,265
  uint8_t pos[pos17,284
  uint8_t from[from18,302
  int32_t cost;19,321
} corridor_path_t;20,337
static uint32_t adjacent_to_room(23,358
static uint32_t is_open_space(31,619
static int32_t corridor_path_cmp(36,718
static void dijkstra_corridor(40,868
static void dijkstra_corridor_inv(139,4605
#define hardnesspair_inv(192,5927
static int connect_two_rooms(242,8598
static int create_cycle(261,9250
static int connect_rooms(303,10815
int gaussian[gaussian316,11008
typedef struct queue_node 324,11164
  int x,325,11192
  int x, y;325,11192
  struct queue_node *next;next326,11204
} queue_node_t;327,11231
static int smooth_hardness(329,11248
static int empty_dungeon(488,15517
static int place_rooms(507,15893
static int make_rooms(544,17080
int gen_dungeon(567,17641
void render_dungeon(582,17787
void delete_dungeon(619,18680
void init_dungeon(624,18737
int write_dungeon_map(629,18794
int write_rooms(642,19023
uint32_t calculate_dungeon_size(662,19442
int write_dungeon(669,19689
int read_dungeon_map(732,21202
int read_rooms(755,21800
int calculate_num_rooms(809,23617
int read_dungeon(817,23857
int read_pgm(896,25759
void render_hardness_map(981,28162
void render_movement_cost_map(1004,28689
void render_distance_map(1026,29194
void render_tunnel_distance_map(1062,30145

dungeon.h,1616
# define DUNGEON_H2,18
#define DUNGEON_X 8,98
#define DUNGEON_Y 9,132
#define MIN_ROOMS 10,166
#define MAX_ROOMS 11,199
#define ROOM_MIN_X 12,232
#define ROOM_MIN_Y 13,265
#define ROOM_MAX_X 14,298
#define ROOM_MAX_Y 15,332
#define SAVE_DIR 16,365
#define DUNGEON_SAVE_FILE 17,406
#define DUNGEON_SAVE_SEMANTIC 18,447
#define DUNGEON_SAVE_VERSION 19,493
#define mappair(21,528
#define mapxy(22,585
#define hardnesspair(23,620
#define hardnessxy(24,687
typedef enum __attribute__ ((__packed__)) terrain_type 26,733
  ter_debug,27,790
  ter_wall,28,803
  ter_wall_immutable,29,815
  ter_floor,30,837
  ter_floor_room,31,850
  ter_floor_hall,32,868
} terrain_type_t;33,886
typedef struct room 35,905
  pair_t position;36,927
  pair_t size;37,946
} room_t;38,961
typedef struct pc 40,972
  pair_t position;41,992
  uint8_t speed;42,1011
  uint32_t turn;43,1046
  uint8_t id;44,1077
} pc_t;45,1105
typedef struct monster 48,1156
  uint8_t x;49,1181
  uint8_t y;50,1194
  int speed;51,1207
  uint8_t type;52,1220
  char pic;53,1236
  uint32_t turn;54,1248
  uint8_t id;55,1265
  uint8_t tun;56,1279
} monster_t;57,1294
typedef struct player{player59,1308
  uint8_t turn;60,1331
  uint8_t id;61,1347
  uint8_t tun;62,1361
}player_t;player_t63,1376
typedef struct dungeon 65,1388
  uint32_t num_rooms;66,1413
  room_t *rooms;rooms67,1435
  terrain_type_t map[map68,1452
  uint8_t hardness[hardness77,2105
  uint8_t pc_distance[pc_distance78,2147
  uint8_t pc_tunnel[pc_tunnel79,2192
  pc_t pc;80,2235
  monster_t monster[monster81,2246
} dungeon_t;82,2312

heap.c,1009
#undef min4,39
struct heap_node 6,51
  heap_node_t *next;next7,70
  heap_node_t *prev;prev8,91
  heap_node_t *parent;parent9,112
  heap_node_t *child;child10,135
  void *datum;datum11,157
  uint32_t degree;12,172
  uint32_t mark;13,191
#define splice_heap_node_lists(16,212
#define insert_heap_node_in_list(25,524
#define remove_heap_node_from_list(32,748
void print_heap_node(37,881
void print_heap(53,1203
void print_heap_node_list(70,1505
void heap_init(86,1704
void heap_node_delete(96,1940
void heap_delete(114,2244
heap_node_t *heap_insert(heap_insert125,2409
void *heap_peek_min(heap_peek_min145,2725
static void heap_link(150,2801
static void heap_consolidate(164,3123
void *heap_remove_min(heap_remove_min205,4056
int heap_combine(240,4590
static void heap_cut(269,5241
static void heap_cascading_cut(283,5522
int heap_decrease_key(297,5748
int heap_decrease_key_no_replace(311,5990
int32_t compare(335,6564
char *print_int(print_int340,6663
int main(349,6781

heap.h,245
# define HEAP_H2,15
typedef struct heap_node heap_node_t;11,114
typedef struct heap 13,153
  heap_node_t *min;min14,175
  uint32_t size;15,195
  int32_t (*compare)compare16,212
  void (*datum_delete)datum_delete17,269
} heap_t;18,301

macros.h,611
# define MACROS_H2,17
#  define dprintf(16,213
#  define dfprintf(17,256
#  define dprintf(19,320
#  define dfprintf(20,343
# define fieldwidth(23,382
# define exit(37,1201
# define fopen(42,1441
#  define malloc(76,3348
#  define calloc(92,4430
#  define strdup(107,5435
#  define free(117,6055
# define swap(125,6303
# define memswap(131,6415
# define structdup(137,6543
# define datacmp(144,6927
# define max2(153,7400
# define min2(160,7576
# define max 167,7752
# define min 168,7770
# define max3(170,7789
# define min3(171,7830
# define frand(173,7872
# define structdup(180,7984

path.c,302
static dungeon_t *dungeon;dungeon12,633
typedef struct path 14,661
  heap_node_t *hn;hn15,683
  uint8_t pos[pos16,702
} path_t;17,720
static int32_t dist_cmp(19,731
static int32_t tunnel_cmp(26,1085
void dijkstra(33,1433
#define tunnel_movement_cost(143,5925
void dijkstra_tunnel(146,6017

path.h,93
# define PATH_H2,15
# define HARDNESS_PER_TURN 4,32
typedef struct dungeon dungeon_t;6,63

rlg327.c,151
  uint32_t  numMonster 14,211
void usage(19,245
static int32_t monster_cmp(32,517
void moveMonster(39,734
void movePC(119,2640
int main(137,3280

utils.c,25
int makedirectory(9,124

utils.h,77
# define UTILS_H2,16
# define rand_under(6,147
# define rand_range(10,290
